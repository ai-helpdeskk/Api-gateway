# File: .github/workflows/api-gateway-ci.yaml
name: CI - API Gateway Service

on:
  push:
    branches:
      - '**'
    paths:
      - 'api-gateway/**'
  workflow_dispatch:

permissions:
  contents: write

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  DOCKER_REPO: ${{ secrets.DOCKER_USERNAME }}
  IMAGE_NAME: api-gateway

jobs:
  ci-pipeline:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        run: |
          python3 --version || {
            sudo apt-get update -qq
            sudo apt-get install -y python3 python3-pip python3-venv
          }
          cd api-gateway
          python3 -m venv venv
          source venv/bin/activate
          python --version

      - name: Install dependencies
        run: |
          cd api-gateway
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort bandit safety pytest pytest-cov pytest-asyncio httpx

      - name: CI Linting 🧹
        run: |
          cd api-gateway
          source venv/bin/activate
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          if [ $? -eq 0 ]; then echo "✅ Linting passed"; else echo "❌ Linting failed" && exit 1; fi

      - name: Source Code Analysis 🔍
        run: |
          cd api-gateway
          source venv/bin/activate
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          black --check --diff . || true
          if [ $? -eq 0 ]; then echo "✅ Code analysis passed"; else echo "⚠️ Code formatting issues found but continuing"; fi

      - name: Software Component Analysis (SCA) 📦
        run: |
          cd api-gateway
          source venv/bin/activate
          safety check --json || true
          if [ $? -eq 0 ]; then echo "✅ SCA passed - No known vulnerabilities"; else echo "⚠️ SCA found vulnerabilities but continuing"; fi

      - name: Static Application Security Testing (SAST) 🔒
        run: |
          cd api-gateway
          source venv/bin/activate
          bandit -r . -f json || true
          if [ $? -eq 0 ]; then echo "✅ SAST passed - No security issues"; else echo "⚠️ SAST found issues but continuing"; fi

      - name: Build Application 🛠️
        run: |
          cd api-gateway
          source venv/bin/activate
          python -m py_compile main.py
          if [ $? -eq 0 ]; then echo "✅ Build successful"; else echo "❌ Build failed" && exit 1; fi

      - name: Run Unit Tests ✅
        run: |
          cd api-gateway
          source venv/bin/activate
          mkdir -p tests
          cat > tests/test_main.py << 'EOF'
          import pytest
          from fastapi.testclient import TestClient
          from unittest.mock import patch, MagicMock
          import sys, os
          sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
          from main import app
          client = TestClient(app)
          def test_root():
              response = client.get("/")
              assert response.status_code == 200
              assert "API Gateway is running" in response.json()["message"]
          @patch('main.get_db_connection')
          def test_health(mock_db):
              mock_connection = MagicMock()
              mock_db.return_value = mock_connection
              response = client.get("/health")
              assert response.status_code == 200
              assert "status" in response.json()
          EOF
          python -m pytest tests/ -v || true
          if [ $? -eq 0 ]; then echo "✅ Tests passed"; else echo "⚠️ Some tests failed but continuing"; fi

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Create Docker Image 🐳
        run: |
          IMAGE_TAG="${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker build -t $IMAGE_TAG -f ./api-gateway/Dockerfile ./api-gateway

      - name: Push Docker Image to Docker Hub 🚢
        run: |
          IMAGE_TAG="${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker push $IMAGE_TAG

      - name: Update and push deployment manifest
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          sed -i "s|image: samitsinghhh/api-gateway:.*|image: ${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|g" api-gateway/k8s/deployment.yaml
          
          git add api-gateway/k8s/deployment.yaml
          git diff --staged --quiet || git commit -m "chore: Update api-gateway image tag to ${{ github.sha }} [skip ci]"
          git push
