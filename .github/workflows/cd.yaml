name: API Gateway CD

on:
  workflow_run:
    workflows: ["API Gateway CI"]
    branches: [main]
    types:
      - completed
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy API Gateway
    runs-on: [self-hosted]
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Verify environment
      run: |
        echo "üîç Verifying deployment environment..."
        echo "Runner: $(uname -a)"
        echo "Docker version: $(docker --version)"
        echo "kubectl version: $(kubectl version --client --short 2>/dev/null || echo 'kubectl not found')"
        
        if ! kubectl cluster-info &>/dev/null; then
          echo "‚ùå kubectl cannot access cluster"
          exit 1
        fi
        echo "‚úÖ Environment verified"

    - name: Wait for critical dependencies
      run: |
        echo "‚è≥ Waiting for critical dependencies..."
        
        # Ensure namespace exists
        kubectl create namespace bedrock-chat-v2 --dry-run=client -o yaml | kubectl apply -f -
        
        # Wait for MySQL (critical dependency)
        echo "üóÑÔ∏è Waiting for MySQL database..."
        for i in {1..40}; do
          if kubectl get pods -n bedrock-chat-v2 -l app=mysql 2>/dev/null | grep -q Running; then
            echo "‚úÖ MySQL is running"
            break
          fi
          if [[ $i -eq 40 ]]; then
            echo "‚ö†Ô∏è MySQL not ready after 10 minutes - deploying anyway but API Gateway may fail to start"
          else
            echo "Waiting for MySQL... ($i/40)"
            sleep 15
          fi
        done
        
        # Wait for Bedrock Service (critical dependency)
        echo "ü§ñ Waiting for Bedrock Service..."
        for i in {1..30}; do
          if kubectl get pods -n bedrock-chat-v2 -l app=bedrock-service 2>/dev/null | grep -q Running; then
            echo "‚úÖ Bedrock Service is running"
            break
          fi
          if [[ $i -eq 30 ]]; then
            echo "‚ö†Ô∏è Bedrock Service not ready - API Gateway will deploy but AI functionality may not work"
          else
            echo "Waiting for Bedrock Service... ($i/30)"
            sleep 10
          fi
        done
        
        # Wait for File Service (critical dependency)
        echo "üìÅ Waiting for File Service..."
        for i in {1..30}; do
          if kubectl get pods -n bedrock-chat-v2 -l app=file-service 2>/dev/null | grep -q Running; then
            echo "‚úÖ File Service is running"
            break
          fi
          if [[ $i -eq 30 ]]; then
            echo "‚ö†Ô∏è File Service not ready - file upload functionality may not work"
          else
            echo "Waiting for File Service... ($i/30)"
            sleep 10
          fi
        done

    - name: Setup configuration
      run: |
        echo "‚öôÔ∏è Setting up API Gateway configuration..."
        
        # Create comprehensive app-config
        kubectl create configmap app-config \
          --from-literal=DATABASE_URL="mysql://bedrock_user:bedrock_password@mysql:3306/bedrock_chat" \
          --from-literal=BEDROCK_SERVICE_URL="http://bedrock-service:9000" \
          --from-literal=FILE_SERVICE_URL="http://file-service:7000" \
          --from-literal=AWS_REGION="us-east-1" \
          --from-literal=REACT_APP_API_URL="/api" \
          -n bedrock-chat-v2 \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Create MySQL secrets if they don't exist
        kubectl create secret generic mysql-secrets \
          --from-literal=MYSQL_ROOT_PASSWORD="rootpassword123" \
          --from-literal=MYSQL_DATABASE="bedrock_chat" \
          --from-literal=MYSQL_USER="bedrock_user" \
          --from-literal=MYSQL_PASSWORD="bedrock_password" \
          -n bedrock-chat-v2 \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Create Docker Hub secret if needed
        if ! kubectl get secret docker-hub-secret -n bedrock-chat-v2 &>/dev/null; then
          kubectl create secret generic docker-hub-secret \
            --from-literal=.dockerconfigjson='{"auths":{"https://index.docker.io/v1/":{"auth":"ZHVtbXk="}}}' \
            --type=kubernetes.io/dockerconfigjson \
            -n bedrock-chat-v2
        fi
        
        echo "‚úÖ Configuration setup completed"

    - name: Deploy API Gateway
      run: |
        echo "üöÄ Deploying API Gateway..."
        
        # Deploy in order: Service first for DNS resolution
        echo "üì° Creating service..."
        kubectl apply -f k8s/service.yaml -n bedrock-chat-v2
        
        echo "üèóÔ∏è Creating deployment..."
        kubectl apply -f k8s/deployment.yaml -n bedrock-chat-v2
        
        # Apply HPA
        echo "üìà Applying HPA..."
        kubectl apply -f k8s/hpa.yaml -n bedrock-chat-v2 || echo "‚ö†Ô∏è HPA failed (metrics-server may not be available)"
        
        # Apply Network Policy
        echo "üîí Applying Network Policy..."
        kubectl apply -f k8s/network-policy.yaml -n bedrock-chat-v2 || echo "‚ö†Ô∏è Network Policy failed"
        
        echo "‚è≥ Waiting for deployment rollout..."
        if kubectl rollout status deployment/api-gateway -n bedrock-chat-v2 --timeout=600s; then
          echo "‚úÖ API Gateway deployed successfully"
        else
          echo "‚ö†Ô∏è Deployment rollout timeout - checking status..."
          kubectl get pods -n bedrock-chat-v2 -l app=api-gateway -o wide
          kubectl describe deployment api-gateway -n bedrock-chat-v2
        fi

    - name: Wait for readiness
      run: |
        echo "‚è≥ Waiting for API Gateway to be ready..."
        
        # Wait for pods to be ready
        kubectl wait --for=condition=ready pod -l app=api-gateway -n bedrock-chat-v2 --timeout=300s || {
          echo "‚ö†Ô∏è Pods not ready within timeout"
          echo "Pod status:"
          kubectl get pods -n bedrock-chat-v2 -l app=api-gateway -o wide
          echo "Pod events:"
          kubectl get events -n bedrock-chat-v2 --field-selector involvedObject.kind=Pod | grep api-gateway
        }

    - name: Verify deployment
      run: |
        echo "üîç Verifying API Gateway deployment..."
        
        echo "=== Deployment Status ==="
        kubectl get deployment api-gateway -n bedrock-chat-v2 -o wide
        
        echo "=== Pods ==="
        kubectl get pods -n bedrock-chat-v2 -l app=api-gateway -o wide
        
        echo "=== Service ==="
        kubectl get service api-gateway -n bedrock-chat-v2 -o wide
        
        echo "=== HPA Status ==="
        kubectl get hpa api-gateway-hpa -n bedrock-chat-v2 2>/dev/null || echo "HPA not available"
        
        echo "=== Recent Logs ==="
        kubectl logs -n bedrock-chat-v2 -l app=api-gateway --tail=20 || echo "No logs available"

    - name: Health check
      run: |
        echo "üè• Performing comprehensive health checks..."
        
        # Test health endpoint
        for i in {1..15}; do
          echo "Health check attempt $i/15..."
          
          if kubectl run api-health-test-$RANDOM \
            --image=curlimages/curl \
            --rm -i --restart=Never \
            --timeout=30s \
            -n bedrock-chat-v2 \
            -- curl -f -m 10 http://api-gateway.bedrock-chat-v2.svc.cluster.local:8000/health; then
            echo "‚úÖ API Gateway health check passed"
            break
          else
            if [[ $i -eq 15 ]]; then
              echo "‚ùå All health check attempts failed"
              kubectl describe pods -n bedrock-chat-v2 -l app=api-gateway
            else
              echo "‚ö†Ô∏è Health check failed, retrying in 10 seconds..."
              sleep 10
            fi
          fi
        done

    - name: Test core endpoints
      run: |
        echo "üß™ Testing API Gateway core endpoints..."
        
        # Test root endpoint
        echo "=== Testing Root Endpoint ==="
        kubectl run api-root-test-$RANDOM \
          --image=curlimages/curl \
          --rm -i --restart=Never \
          --timeout=30s \
          -n bedrock-chat-v2 \
          -- curl -f -m 10 http://api-gateway.bedrock-chat-v2.svc.cluster.local:8000/ || echo "‚ö†Ô∏è Root endpoint failed"
        
        # Test services status endpoint
        echo "=== Testing Services Status ==="
        kubectl run api-status-test-$RANDOM \
          --image=curlimages/curl \
          --rm -i --restart=Never \
          --timeout=30s \
          -n bedrock-chat-v2 \
          -- curl -f -m 10 http://api-gateway.bedrock-chat-v2.svc.cluster.local:8000/services/status || echo "‚ö†Ô∏è Services status failed"

    - name: Test service integrations
      run: |
        echo "üîó Testing service integrations..."
        
        # Test Bedrock Service integration
        echo "=== Testing Bedrock Service Integration ==="
        kubectl exec -n bedrock-chat-v2 -l app=api-gateway -- python -c "
        import httpx
        import asyncio
        
        async def test_bedrock():
            try:
                async with httpx.AsyncClient(timeout=10.0) as client:
                    response = await client.get('http://bedrock-service:9000/health')
                    print(f'Bedrock Service Status: {response.status_code}')
                    if response.status_code == 200:
                        print('‚úÖ Bedrock Service integration working')
                    else:
                        print('‚ö†Ô∏è Bedrock Service returned non-200 status')
            except Exception as e:
                print(f'‚ùå Bedrock Service integration failed: {e}')
        
        asyncio.run(test_bedrock())
        " 2>/dev/null || echo "‚ö†Ô∏è Bedrock Service integration test failed"
        
        # Test File Service integration  
        echo "=== Testing File Service Integration ==="
        kubectl exec -n bedrock-chat-v2 -l app=api-gateway -- python -c "
        import httpx
        import asyncio
        
        async def test_file_service():
            try:
                async with httpx.AsyncClient(timeout=10.0) as client:
                    response = await client.get('http://file-service:7000/health')
                    print(f'File Service Status: {response.status_code}')
                    if response.status_code == 200:
                        print('‚úÖ File Service integration working')
                    else:
                        print('‚ö†Ô∏è File Service returned non-200 status')
            except Exception as e:
                print(f'‚ùå File Service integration failed: {e}')
        
        asyncio.run(test_file_service())
        " 2>/dev/null || echo "‚ö†Ô∏è File Service integration test failed"

    - name: Test database connectivity
      run: |
        echo "üíæ Testing database connectivity..."
        
        kubectl exec -n bedrock-chat-v2 -l app=api-gateway -- python -c "
        import mysql.connector
        import os
        
        try:
            database_url = os.getenv('DATABASE_URL')
            print(f'Testing connection with: {database_url}')
            
            # Parse DATABASE_URL
            url_parts = database_url.replace('mysql://', '').split('/')
            auth_host = url_parts[0].split('@')
            auth = auth_host[0].split(':')
            host_port = auth_host[1].split(':')
            
            connection = mysql.connector.connect(
                host=host_port[0],
                port=int(host_port[1]) if len(host_port) > 1 else 3306,
                user=auth[0],
                password=auth[1],
                database=url_parts[1],
                connection_timeout=15
            )
            
            cursor = connection.cursor()
            
            # Test basic connection
            cursor.execute('SELECT 1')
            cursor.fetchone()
            print('‚úÖ Database connection successful')
            
            # Check if conversations table exists
            cursor.execute(\"SHOW TABLES LIKE 'conversations'\")
            if cursor.fetchone():
                print('‚úÖ conversations table exists')
                
                # Check table structure
                cursor.execute('DESCRIBE conversations')
                columns = cursor.fetchall()
                print(f'‚úÖ conversations table has {len(columns)} columns')
            else:
                print('‚ö†Ô∏è conversations table does not exist - creating it...')
                # Create conversations table
                cursor.execute('''
                CREATE TABLE conversations (
                    id INT AUTO_INCREMENT PRIMARY KEY,
                    session_id VARCHAR(255) NOT NULL,
                    message TEXT NOT NULL,
                    response TEXT NOT NULL,
                    model_used VARCHAR(100),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    INDEX idx_session_id (session_id),
                    INDEX idx_created_at (created_at)
                )
                ''')
                connection.commit()
                print('‚úÖ conversations table created')
            
            cursor.close()
            connection.close()
            
        except Exception as e:
            print(f'‚ùå Database connectivity test failed: {e}')
            exit(1)
        " 2>/dev/null || echo "‚ö†Ô∏è Database connectivity test failed"

    - name: Test end-to-end functionality
      run: |
        echo "üîÑ Testing end-to-end functionality..."
        
        # Test a simple chat request
        echo "=== Testing Chat Endpoint ==="
        kubectl run api-chat-test-$RANDOM \
          --image=curlimages/curl \
          --rm -i --restart=Never \
          --timeout=60s \
          -n bedrock-chat-v2 \
          -- curl -f -X POST \
            -H "Content-Type: application/json" \
            -d '{"message":"Hello, this is a test message from CD pipeline","session_id":"cd-test-session"}' \
            -m 30 \
            http://api-gateway.bedrock-chat-v2.svc.cluster.local:8000/chat || echo "‚ö†Ô∏è End-to-end chat test failed (expected if Bedrock Service doesn't have valid AWS credentials)"
        
        # Test conversation history endpoint
        echo "=== Testing Conversation History ==="
        kubectl run api-history-test-$RANDOM \
          --image=curlimages/curl \
          --rm -i --restart=Never \
          --timeout=30s \
          -n bedrock-chat-v2 \
          -- curl -f -m 10 http://api-gateway.bedrock-chat-v2.svc.cluster.local:8000/conversation/cd-test-session || echo "‚ö†Ô∏è Conversation history test failed"

    - name: Performance and load test
      run: |
        echo "üìä Basic performance testing..."
        
        # Test concurrent requests
        echo "=== Concurrent Health Checks ==="
        kubectl run api-load-test-$RANDOM \
          --image=curlimages/curl \
          --rm -i --restart=Never \
          --timeout=60s \
          -n bedrock-chat-v2 \
          -- sh -c 'for i in $(seq 1 10); do
            curl -f -m 5 http://api-gateway.bedrock-chat-v2.svc.cluster.local:8000/health &
          done; wait; echo "All concurrent requests completed"' || echo "‚ö†Ô∏è Load test failed"
        
        # Check resource usage
        echo "=== Resource Usage ==="
        kubectl top pods -n bedrock-chat-v2 -l app=api-gateway || echo "Metrics not available"

    - name: Setup monitoring and alerts
      run: |
        echo "üì± Setting up monitoring..."
        
        # Create monitoring CronJob
        cat << 'EOF' > api-gateway-monitor.yaml
        apiVersion: batch/v1
        kind: CronJob
        metadata:
          name: api-gateway-monitor
          namespace: bedrock-chat-v2
        spec:
          schedule: "*/2 * * * *"  # Every 2 minutes
          jobTemplate:
            spec:
              template:
                spec:
                  containers:
                  - name: monitor
                    image: curlimages/curl
                    command:
                    - /bin/sh
                    - -c
                    - |
                      echo "=== API Gateway Health Check at $(date) ==="
                      
                      # Health check
                      if curl -f -m 10 http://api-gateway:8000/health; then
                        echo "‚úÖ API Gateway healthy"
                      else
                        echo "‚ùå API Gateway unhealthy"
                      fi
                      
                      # Services status check
                      echo "=== Services Status ==="
                      curl -f -m 10 http://api-gateway:8000/services/status || echo "Services status check failed"
                      
                      echo "=== Monitor completed ==="
                  restartPolicy: OnFailure
              backoffLimit: 2
        EOF
        
        kubectl apply -f api-gateway-monitor.yaml || echo "‚ö†Ô∏è Monitoring setup failed"
        rm -f api-gateway-monitor.yaml
        
        echo "‚úÖ Monitoring setup completed"

    - name: Create NodePort service for external access
      run: |
        echo "üåê Setting up external access..."
        
        # Create NodePort service for external access
        cat << 'EOF' > api-gateway-nodeport.yaml
        apiVersion: v1
        kind: Service
        metadata:
          name: api-gateway-nodeport
          namespace: bedrock-chat-v2
          labels:
            app: api-gateway
        spec:
          type: NodePort
          ports:
          - port: 8000
            targetPort: 8000
            nodePort: 30800
            name: http
          selector:
            app: api-gateway
        EOF
        
        kubectl apply -f api-gateway-nodeport.yaml || echo "‚ö†Ô∏è NodePort service creation failed"
        rm -f api-gateway-nodeport.yaml
        
        # Get external access info
        if kubectl get service api-gateway-nodeport -n bedrock-chat-v2 &>/dev/null; then
          echo "‚úÖ External access configured"
          echo "NodePort service created - API Gateway accessible on port 30800"
        fi

    - name: Deployment summary
      run: |
        echo "üéâ **API Gateway Deployment Complete!**"
        echo ""
        echo "üìã **Status Overview:**"
        kubectl get deployment,pods,svc -n bedrock-chat-v2 -l app=api-gateway 2>/dev/null || echo "Components still initializing..."
        echo ""
        echo "üîß **Configuration:**"
        echo "- Internal URL: http://api-gateway.bedrock-chat-v2.svc.cluster.local:8000"
        echo "- External NodePort: :30800 (if configured)"
        echo "- Database: MySQL (bedrock_chat)"
        echo "- Bedrock Service: http://bedrock-service:9000"
        echo "- File Service: http://file-service:7000"
        echo ""
        echo "üîó **API Endpoints:**"
        echo "- Health Check: GET /health"
        echo "- Root Info: GET /"
        echo "- Chat: POST /chat"
        echo "- File Upload: POST /upload" 
        echo "- Conversation History: GET /conversation/{session_id}"
        echo "- Files List: GET /files/{session_id}"
        echo "- Clear Conversation: DELETE /conversation/{session_id}"
        echo "- Services Status: GET /services/status"
        echo ""
        echo "‚úÖ **Features Enabled:**"
        echo "- ‚úÖ RESTful API Gateway"
        echo "- ‚úÖ Conversation Memory (MySQL)"
        echo "- ‚úÖ File Upload & Processing"
        echo "- ‚úÖ AI Chat Integration (Bedrock)"
        echo "- ‚úÖ Multi-session Support"
        echo "- ‚úÖ CORS for web clients"
        echo "- ‚úÖ Health monitoring"
        echo "- ‚úÖ Service status monitoring"
        echo ""
        echo "üîç **Testing Commands:**"
        echo "- Health: curl http://api-gateway:8000/health"
        echo "- Chat: curl -X POST -H 'Content-Type: application/json' -d '{\"message\":\"Hello\"}' http://api-gateway:8000/chat"
        echo "- Status: curl http://api-gateway:8000/services/status"
        echo ""
        echo "üìä **Monitoring:**"
        echo "- Logs: kubectl logs -f deployment/api-gateway -n bedrock-chat-v2"
        echo "- Watch pods: kubectl get pods -n bedrock-chat-v2 -l app=api-gateway -w"
        echo "- Check HPA: kubectl get hpa api-gateway-hpa -n bedrock-chat-v2"
        echo ""
        echo "üöÄ **Next Steps:**"
        echo "1. Deploy Frontend to complete the stack"
        echo "2. Configure ingress for production access"
        echo "3. Test complete user workflow"
        echo "4. Monitor conversation storage"
        echo "5. Set up backup and recovery"
        echo ""
        echo "‚ö†Ô∏è **Important Notes:**"
        echo "- Ensure AWS credentials are properly configured for Bedrock Service"
        echo "- Monitor database storage usage"
        echo "- Check file upload size limits"
        echo "- Verify network policies don't block traffic"
        echo ""
        echo "‚úÖ **API Gateway is ready for production use!**"
